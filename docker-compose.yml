version: '3.6'
services:
  telegraf:
    image: telegraf:1.29-alpine
    platform: linux/amd64
    user: root:1000
    volumes:
      - ./telegraf/etc/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - influxdb
    links:
      - influxdb
    ports:
      - '127.0.0.1:8125:8125/udp'
    networks:
      - backend
    hostname: telegraf

  influxdb:
    image: influxdb:1.8-alpine
    platform: linux/amd64
    env_file: configuration.env
    ports:
      - '127.0.0.1:8086:8086'
    volumes:
      - ./:/imports
      - influxdb_data:/var/lib/influxdb
    networks:
      - backend
    hostname: influxdb

  grafana:
    image: grafana/grafana:8.0.2
    depends_on:
      - influxdb
    env_file: configuration.env
    links:
      - influxdb
    ports:
      - '127.0.0.1:3001:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/dashboards/:/var/lib/grafana/dashboards/
    networks:
      - backend
    hostname: grafana

  mongodb:
    image: mongo:latest
    restart: always
    ports:
      - '127.0.0.1:27017:27017'
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend
    hostname: mongodb

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    environment:
      - discovery.type=single-node
    ports:
      - '127.0.0.1:9200:9200'
    networks:
      - backend
    hostname: elasticsearch

  nginx:
    image: nginx:latest
    ports:
      - '80:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - backend
    hostname: nginx

  rails_test:
    build: ./rails_test
    depends_on:
      - mongodb
      - elasticsearch
    ports:
      - '3000:3000'
    networks:
      - backend
    hostname: rails_test

volumes:
  grafana_data: {}
  influxdb_data: {}
  mongodb_data: {}

networks:
  backend:
    external: true